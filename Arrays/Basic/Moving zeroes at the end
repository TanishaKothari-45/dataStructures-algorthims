******// Java code for moving all zeroes at the end of the array //*******

{ Make Sure the sequance of non zero elements remain the same}

class Solution {
    void pushZerosToEnd(int[] arr, int n) {
        int i = 0;
        int j = 0;
        while (j < n) {
            if (arr[j] != 0) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
            }
            j++;
        }
    }
}
This version uses two pointers i and j to iterate through the array. The i pointer keeps track of the next available position for a non-zero element, and the j pointer iterates through all elements in the array.

When an element at index j is non-zero, it swaps the element at index i with the element at index j and increments i. This way, all non-zero elements are moved to the front of the array and all zero elements are moved to the end.

Also, this version of the code doesn't need to use a separate swap function, it can use a simple temp variable to store the value of the element at index i and then swap the values of arr[i] and arr[j]

Also, in this version, it is guaranteed that no index out of bounds error occurs because the while loop will always check that j is less than n, which is the length of the array.



